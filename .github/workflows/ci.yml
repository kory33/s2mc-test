name: Run cached tests

# Build script adopted from itemstack-count-infrastructure (https://github.com/kory33/itemstack-count-infrastructure/blob/22721250c3e8bb2688538e3933a5f5f998406c2c/.github/workflows/create-release.yml)

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - 'feature/**'
  pull_request:
    branches:
      - 'master'
      - 'develop'

jobs:
  lint_and_test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Prepare build dependencies cache
        uses: actions/cache@v2
        env:
          cache-name: cache-build-dependencies
          cache-version: v-3
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.m2
            ~/.cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-${{ github.ref }}-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-${{ github.ref }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-

      - name: Prepare build cache
        uses: actions/cache@v2
        env:
          cache-name: cache-build
          cache-version: v-2
        with:
          path: |
            target
            project/target
            project/project/target
            protocol-core/target
            protocol-impl/target
            examples/target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-${{ github.ref }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-

      - name: Check Format
        run: sbt scalafmtCheckAll

      - name: Compile & Scalafix
        run: sbt "compile; scalafixAll --check"

      - name: Test
        run: sbt test

      # releasing (possibly snapshot) artifacts
      - name: Import signing PGP key
        run: echo $PGP_SECRET | gpg --import

      - name: Publish
        run: sbt publish
