package io.github.kory33.s2mctest.core.clientpool

import cats.Functor
import cats.effect.{IO, Ref}

/**
 * The on-memory storage of names generated for test purposes.
 *
 * @param issuedRef
 *   reference for the set of names previously generated by [[generate]] function
 * @param generate
 *   a function that generates a new account name from the set of generated names
 */
class AccountPool[F[_]](issuedRef: Ref[F, Set[String]], generate: Set[String] => String) {

  def getFresh: F[String] = issuedRef.modify { issued =>
    val newName = generate(issued)
    if issued.contains(newName) then
      throw IllegalStateException(s"Obtained a duplicate name: $newName from $issued")
    else (issued.incl(newName), newName)
  }

}

object AccountPool {

  /**
   * Rules for generating account names.
   */
  object GenerationRules {
    def numbered(prefix: String): Set[String] => String = set => s"$prefix-${set.size}"
    val default: Set[String] => String = numbered("s2mc-client-")
  }

  def fromGenerationRule[F[_]: Ref.Make: Functor](
    generate: Set[String] => String
  ): F[AccountPool[F]] =
    Functor[F].map(Ref.of[F, Set[String]](Set.empty)) { setRef =>
      AccountPool(setRef, generate)
    }

  def default[F[_]: Ref.Make: Functor]: F[AccountPool[F]] = fromGenerationRule(
    GenerationRules.default
  )
}
